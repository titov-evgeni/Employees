version: '3.7'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: [ "/bin/sh", "entrypoint.sh" ]
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - "./employees_project:/usr/src/app/"
    ports:
      - 8000:8000
    env_file: .env
    depends_on:
      - db
      - redis

  db:
    image: postgres:12.0-alpine
    volumes:
      - ".data/postgres:/var/lib/postgresql/data"
    env_file:
      - .env

  redis:
    image: redis:5-alpine
    restart: always

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery --app employees_project worker --loglevel=info
    volumes:
      - "./employees_project:/usr/src/app/"
    environment:
      - PYTHONUNBUFFERED=1
    env_file: .env
    depends_on:
      - db
      - redis
    restart: always

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery --app employees_project beat --loglevel=info
    volumes:
      - "./employees_project:/usr/src/app/"
    environment:
      - PYTHONUNBUFFERED=1
    env_file: .env
    depends_on:
      - db
      - redis
    restart: always



volumes:
  postgres_data:



## Docker-compose configuration for development
#
#version: '3.7'
#
#services:
#    web:
#        build:
#            context: .
#            dockerfile: Dockerfile
#        command: python manage.py runserver 0.0.0.0:8000
#        environment:
#            - PYTHONUNBUFFERED=1
#        volumes:
#            - ./:/app
#        ports:
#            - 8000:8000
#        depends_on:
#            - db
##            - redis
#        env_file:
#            - .env
#        restart: always
#
#    db:
#        image: postgres:12-alpine
#        ports:
#            - 5434:5432
#        env_file:
#            - .env
#        volumes:
#            - ".data/postgres:/var/lib/postgresql/data"
#        restart: always
#
#
#
##    celery_worker:
##        build: .
##        restart: always
##        command: celery -A  rocket_data worker -l INFO --pool=solo --beat
##        volumes:
##            - 'pgdata:/var/lib/postgresql/data'
##        depends_on:
##            - redis
##            - db
##        environment:
##            IS_DELETE_TEMP_DB: "false"
##            DJANGO_SETTINGS_MODULE: "rocket_data.settings"
##
##    redis:
##        image: redis:5-alpine
##        restart: always
#
#volumes:
#  pgdata:
#
##
##
##services:
##    booking_django:
##        image: django
##        build:
##            context: .
##            dockerfile: Dockerfile
##        # In case of troubleshoots with database, start use:
##        #        entrypoint: /usr/bin/start.sh
##        command: python manage.py runserver 0.0.0.0:8000
##        ports:
##            - "8000:8000"
##        volumes:
##            - "./backend:/app"
##            - "static_volume:/usr/share/nginx/html/staticfiles"
##            - "media_volume:/usr/share/nginx/html/mediafiles"
##        environment:
##            - PYTHONUNBUFFERED=1
##        env_file: .env
##        depends_on:
##            - booking_postgres
##            - redis
##        container_name: booking_django
##        networks:
##            - booking_local_services
##
##    booking_postgres:
##        image: postgis/postgis
##        volumes:
##            - ".data/postgres:/var/lib/postgresql/data"
##        environment:
##            POSTGRES_DB: booking
##            POSTGRES_USER: booking
##            POSTGRES_PASSWORD: booking
##        container_name: booking_postgres
##        ports:
##            - "5432:5432"
##        networks:
##            - booking_local_services
##
##    redis:
##        image: redis:5-alpine
##        networks:
##            - booking_local_services
##
##    celery:
##        restart: always
##        build:
##            context: .
##            dockerfile: Dockerfile
##        command: celery --app backend worker --loglevel=info
##        volumes:
##            - "./backend:/app"
##        environment:
##            - PYTHONUNBUFFERED=1
##        env_file: .env
##        depends_on:
##            - booking_postgres
##            - booking_django
##            - redis
##        networks:
##            - booking_local_services
##
##    flower:
##        image: mher/flower
##        command: celery --broker=redis://redis:6379/0 flower
##        ports:
##            - 5555:5555
##        env_file: .env
##        depends_on:
##            - booking_django
##            - redis
##            - celery
##        networks:
##            - booking_local_services
##
##networks:
##    booking_local_services:
##        name: booking_local_services
##        driver: bridge
##
##volumes:
##    static_volume:
##    media_volume:
